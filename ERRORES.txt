PRÁCTICA SOLID

En el proyecto se incumplen los cinco principios SOLID:

PRINCIPIO DE RESPONSABILIDAD ÚNICA

La clase File tiene métodos de lectura y escritura, también tiene métodos para abrir y cerrar un fichero, también tiene métodos para ver el tamaño de los ficheros y métodos para convertir los ficheros a otras extensiones. 
La clase Directory tiene métodos para añadir y eliminar ficheros y un método para listar ficheros. Tiene un montón de métodos que no utiliza que hereda de una interfaz, lo cual incumple el principio de segregación de interfaces. 
La clase FileSystemItemBase tiene métodos get y set de sus Propiedades Name y Parent y también tiene un método para obtener el Path Completo.
A parte de las clases con varias funcionalidades, los métodos también tienen varias funcionalidades, por ejemplo el método convertMp3ToWav() tiene que leer de un fichero, luego también hace escritura, conversión…

PRINCIPIO ABIERTO/CERRADO

En el código que nos dan no cumple el principio de abierto/cerrado. Para cambiar cualquier cosa tienes que tocar todas las clases. 
La visibilidad de los atributos de las clases deberían ser privados y acceder a ellos a través de los métodos get y set.
Hay métodos que tienen muchos if anidados, por ejemplo el método setParent, lo que además hace que sea complicado de entender. Este setParent lo único que necesita es que por parámetro le pasemos un directorio, puesto que solo puede ser directorio no tiene sentido pasarle todos los ficheros y así desaparece esa estructura de if anidados.
He cambiado los atributos de la clase padre a privados y he creado sus métodos get y set para poder acceder a estos atributos. 

PRINCIPIO DE SUSTITUCIÓN DE LISKOV

Este principio tampoco se cumple, la clase padre, FileSystemItemBase,  implementa todos los métodos de la interfaz como métodos abstractos, lo cual genera que las clases hijas tengan métodos que solo producen excepciones, al igual que pasa con los métodos de la interfaz que no son comunes entre clases. La clase padre solo debería tener los atributos que son comunes en las clases hijas y los métodos que también sean comunes a las clases hijas, por ejemplo el método listFiles que está definido como método abstracto en la clase FileSystemItemBase y no cumpliría este principio para la clase hija File, por tanto este método se ha sacado a la clase Directory que es la única que lo necesita. Como este método se han sacado todos los métodos que no son comunes a las dos clases hijas.

PRINCIPIO DE SEGREGACIÓN DE INTERFACES

La Interfaz FileSystemItems.java tiene demasiados métodos y no todas las clases necesitan todos los métodos, lo cual genera que las clases que implementan esta interfaz tengan métodos que solo producen excepciones, hay que separar esta interfaz en interfaces más pequeñas.

PRINCIPIO DE INVERSIÓN DE DEPENDENCIAS

Este principio tampoco se respeta todas las clases dependen unas de otras y cualquier cambio en una clase hace que tengas que hacer cambios en el resto de las clases. Para solucionarlo me he creado distintas interfaces, he hecho que la clase padre sea abstracta y las clases hijas heredan los métodos de la clase padre y dependiendo de la funcionalidad que necesita cada clase hija también implementa la interfaz que necesita, de forma que ya los cambios en una clase no afectan al resto de clases.

CONCLUSIONES

He eliminado todos los métodos que estaban implementados pero que no se utilizaban a lo largo de la vida del programa.
A la hora de hacer los commits iban varios principios en cada commit, es difícil intentar solucionar uno sin tocar algo de otro, he llamado el commit con el principio fundamental que se modificaba, pero en realidad no era el único principio que se veía afectado con el cambio.
